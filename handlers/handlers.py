import os
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
import requests
import time
from bs4 import BeautifulSoup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config_data.config import Config, load_config
from aiogram.types.input_file import FSInputFile

from database.database import insert_database
from keyboards.keyboard import html_keyboard
from lexicon.lexicon import LEXICON_RU

config: Config = load_config()
bot = Bot(token=config.tg_bot.token)

class Link(StatesGroup):
    link = State()
router = Router()

@router.message(Command(commands=['start']))
async def process_start_command(message: Message):
    await message.answer(f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!üëÄ</b>", parse_mode="HTML")
    await message.answer(LEXICON_RU['/start'],
    reply_markup = html_keyboard)

@router.message(F.text == '–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é')
async def get_link(message: Message, state: FSMContext):
    await state.set_state(Link.link)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:')
@router.message(Link.link)
async def get_link_2(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    link = message.text
    await state.update_data(link=link)
    await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    time.sleep(1)
    data = await state.get_data()
    link = data.get("link")
    insert_database(user_id, username, link)

    if link:
        try:
            def fetch_data(link):
                count = 0
                while True:
                    response = requests.get(link)
                    soup = BeautifulSoup(response.text, 'html.parser')
                    scripts = soup.find_all('script', class_="state-view")

                    if scripts:
                        return scripts[0].string  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ

                    count += 1
                    print(count)
            def extract_coordinates(content, output_file):
                start_marker = '"coordinates":[['
                end_marker = ']]}'

                start_index = content.find(start_marker)
                end_index = content.find(end_marker, start_index)

                if start_index != -1 and end_index != -1:
                    start_index += len(start_marker)
                    coordinates_data = content[start_index:end_index].strip()

                    # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ, –∞ –∑–∞—Ç–µ–º —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    coordinates_data = coordinates_data.replace('[', '').replace(']', '').replace(',', '\n').strip()

                    with open(output_file, 'w', encoding='utf-8') as outfile:
                        outfile.write(coordinates_data)
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö.")

            def edit_file(search_string, file_name):
                with open(file_name, 'r', encoding="utf-8") as file:
                    lines = file.readlines()

                filtered_lines = [line for line in lines if search_string in line]

                if filtered_lines:
                    with open(file_name, 'w', encoding="utf-8") as file:
                        file.writelines(filtered_lines)
                else:
                    print("–°—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
            file_name = f"./database/{message.from_user.username}.txt"

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å URL
            data = fetch_data(link)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open(file_name, 'w', encoding="utf-8") as file:
                file.write(data)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
            extract_coordinates(data, file_name)

            import xml.etree.ElementTree as ET

            import xml.etree.ElementTree as ET

            def convert_to_gpx(input_file, output_file):
                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç GPX
                gpx = ET.Element('gpx', version='1.1', creator='YourName')

                # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç track
                trk = ET.SubElement(gpx, 'trk')
                trkseg = ET.SubElement(trk, 'trkseg')  # –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç —Ç—Ä–µ–∫–∞

                with open(input_file, 'r') as file:
                    lines = file.readlines()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    for i in range(0, len(lines), 2):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å —à–∞–≥–æ–º 2
                        if i + 1 < len(lines):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
                            longitude = lines[i].strip()  # –î–æ–ª–≥–æ—Ç–∞
                            latitude = lines[i + 1].strip()  # –®–∏—Ä–æ—Ç–∞

                            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç "trkpt" (track point) –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                            trkpt = ET.SubElement(trkseg, 'trkpt', lat=latitude, lon=longitude)
                            ET.SubElement(trkpt, 'name').text = f'Point {i // 2 + 1}'  # –ò–º—è —Ç–æ—á–∫–∏

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º GPX –≤ —Ñ–∞–π–ª
                tree = ET.ElementTree(gpx)
                tree.write(output_file, encoding='utf-8', xml_declaration=True)

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
            input_file = f'./database/{message.from_user.username}.txt'  # –ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            output_file = f'./database/{message.from_user.username}.gpx'  # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ GPX —Ñ–∞–π–ª–∞

            convert_to_gpx(input_file, output_file)
            user_id = message.from_user.id
            document = FSInputFile(f'./database/{message.from_user.username}.gpx')
            await bot.send_document(user_id, document, caption=f'–í–∞—à GPX-—Ñ–∞–π–ª!')
            os.remove(f'./database/{message.from_user.username}.txt')
        except Exception as e:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}')
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.')
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=["help"]))
async def start_command(message:Message):
    await message.answer(text=LEXICON_RU['/help'], reply_markup=html_keyboard, parse_mode="HTML")